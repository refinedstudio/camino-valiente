---
interface Props {
  imageUrl: string;
  title: string;
  category: string;
  subtitle?: string;
  isVisible?: boolean;
}

const { imageUrl, title, category, subtitle, isVisible = true } = Astro.props;
---

<section
  class="relative w-full h-[70vh] overflow-hidden group cursor-pointer"
  style={{
    opacity: isVisible ? 1 : 0,
    transition: "opacity 0.8s ease-in-out",
  }}
>
  <div class="absolute inset-0 w-full h-full overflow-hidden">
    <div class="absolute inset-0 bg-black/40 z-10"></div>
    <div
      class="absolute inset-0 w-full h-[120%] bg-cover bg-center bg-no-repeat transform-gpu scale-110 transition-transform duration-500"
      style={{
        backgroundImage: `url(${imageUrl})`,
        transform: "translateY(0)",
        willChange: "transform",
      }}
      data-parallax="true"
    >
    </div>
  </div>

  <div
    class="absolute inset-0 z-20 flex flex-col items-center justify-center text-center px-4"
  >
    <div
      class="max-w-4xl transform translate-y-0 transition-transform duration-500 group-hover:translate-y-[-10px]"
    >
      <p class="text-sm text-white/80 mb-4 font-semibold tracking-widest">
        {category}
      </p>

      <h1
        class="font-playfair-display text-2xl sm:text-3xl md:text-4xl lg:text-5xl text-white font-normal tracking-wide leading-tight mb-2 uppercase"
      >
        {title}
      </h1>

      {
        subtitle && (
          <h2 class="font-sans text-2xl sm:text-3xl md:text-4xl lg:text-5xl text-white font-bold mb-12 uppercase">
            {subtitle}
          </h2>
        )
      }
      <div class="flex justify-end items-center">
        <div
          class="inline-flex items-center text-white text-base tracking-widest pb-1 transition-all duration-300 hover:border-white group"
        >
          <div class="h-[1px] w-16 md:w-24 bg-white"></div>
          <span class="ml-2">LEER M√ÅS</span>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const parallaxElements = document.querySelectorAll(
      '[data-parallax="true"]'
    );

    function handleScroll() {
      parallaxElements.forEach((element) => {
        const parent = element.closest("article");
        if (!parent) return;

        const parentRect = parent.getBoundingClientRect();
        const viewportHeight = window.innerHeight;

        if (parentRect.top < viewportHeight && parentRect.bottom > 0) {
          const scrollPosition = parentRect.top;
          const translateY = Math.max(0, Math.min(100, scrollPosition * 0.1));
          (element as HTMLElement).style.transform =
            `translateY(${translateY}px) scale(1.2)`;
        }
      });
    }

    window.addEventListener("scroll", handleScroll);
    handleScroll();
  });
</script>
